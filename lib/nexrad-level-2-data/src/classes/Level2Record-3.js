// Integer*4 = readInt() = uint32
// Integer*2 = readShort() = uint16
// Scaled Integer*2 = readShort() / scale (in ACCURACY/PRECISION column)
// Scaled Integer*1 = readByte()
// Code*2 = readShort()
// Real*4 = readFloat() = float32
// Code*1 = readByte()
// Integer*1 = readByte()
// Scaled SInteger*2 = readShort()

// parse message type 3
module.exports = (raf, message) => {
    message.record = {
        _                                    :raf.readShort(), // uint16
        LoopBackTestStatus                   :raf.readShort(), // uint16
        T1OutputFrames                       :raf.readInt(), // uint32
        T1InputFrames                        :raf.readInt(), // uint32
        RouterMemoryUsed                     :raf.readInt(), // uint32
        RouterMemoryFree                     :raf.readInt(), // uint32
        RouterMemoryUtilization              :raf.readShort(), // uint16
        RouteToRPG                           :raf.readShort(), // uint16
        CSULossOfSignal                      :raf.readInt(), // uint32
        CSULossOfFrames                      :raf.readInt(), // uint32
        CSUYellowAlarms                      :raf.readInt(), // uint32 // Number of times Resource Availability Indication (RAI) (yellow) alarm received.
        CSUBlueAlarms                        :raf.readInt(), // uint32 // Number of times Alarm Indication Signal (AIS) (blue) alarm received
        CSU24hrErroredSeconds                :raf.readInt(), // uint32
        CSU24hrSeverelyErroredSeconds        :raf.readInt(), // uint32
        CSU24hrSeverelyErroredFramingSeconds :raf.readInt(), // uint32
        CSU24hrUnavailableSeconds            :raf.readInt(), // uint32
        CSU24hrControlledSlipSeconds         :raf.readInt(), // uint32
        CSU24hrPathCodingViolations          :raf.readInt(), // uint32
        CSU24hrLineErroredSeconds            :raf.readInt(), // uint32
        CSU24hrBurstyErroredSeconds          :raf.readInt(), // uint32
        CSU24hrDegradedMinutes               :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        LANSwitchCPUUtilization              :raf.readInt(), // uint32
        LANSwitchMemory                      :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        IFDRChassisTemp                      :raf.readShort(), // uint16
        IFDRFPGATemp                         :raf.readShort(), // uint16
        _                                    :raf.readInt(), // uint32
        GPSSats                              :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        IPCStatus                            :raf.readShort(), // uint16
        CommandedChannelControl              :raf.readShort(), // uint16
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readShort(), // uint16
        Polarization                         :raf.readShort(), // uint16
        AMEInternalTemp                      :raf.readFloat(), // float32
        AMERecvModuleTemp                    :raf.readFloat(), // float32
        AMEBITECALModuleTemp                 :raf.readFloat(), // float32
        AMEPeltier                           :raf.readShort(), // uint16
        AMEPeltierStatus                     :raf.readShort(), // uint16
        AMEADConverterStatus                 :raf.readShort(), // uint16
        AMEState                             :raf.readShort(), // uint16
        AME33VPSVoltage                      :raf.readFloat(), // float32
        AME5VPSVoltage                       :raf.readFloat(), // float32
        AME65VPSVoltage                      :raf.readFloat(), // float32
        AME15VPSVoltage                      :raf.readFloat(), // float32
        AME48VPSVoltage                      :raf.readFloat(), // float32
        AMESTALOPower                        :raf.readFloat(), // float32
        PeltierCurrent                       :raf.readFloat(), // float32
        ADCCalibrationRefVoltage             :raf.readFloat(), // float32
        AMEMode                              :raf.readShort(), // uint16
        AMEPeltierMode                       :raf.readShort(), // uint16
        AMEPeltierInsideFanCurrent           :raf.readFloat(), // float32
        AMEPeltierOutsideFanCurrent          :raf.readFloat(), // float32
        HorzTRLimiterVoltage                 :raf.readFloat(), // float32
        VertTRLimiterVoltage                 :raf.readFloat(), // float32
        ADCCalibrationOffsetVoltage          :raf.readFloat(), // float32
        ADCCalibrationGainCorrection         :raf.readFloat(), // float32
        RCPStatus                            :raf.readShort(), // uint16
        RCPString                            :raf.readString(16), // [16]byte
        SPIPPowerButtons                     :raf.readShort(), // uint16
        _                                    :raf.readInt(), // uint32
        MasterPowerAdminLoad                 :raf.readFloat(), // float32
        ExpansionPowerAdminLoad              :raf.readFloat(), // float32
        _                                    :raf.read(44), // [44]byte
        PS5VDC                               :raf.readShort(), // uint16
        PS15VDC                              :raf.readShort(), // uint16
        PS28VDC                              :raf.readShort(), // uint16
        PSn15VDC                             :raf.readShort(), // uint16
        PS45VDC                              :raf.readShort(), // uint16
        FilamentPSVoltage                    :raf.readShort(), // uint16
        VacuumPumpPSVoltage                  :raf.readShort(), // uint16
        FocusCoilPSVoltage                   :raf.readShort(), // uint16
        FilamentPS                           :raf.readShort(), // uint16
        KlystronWarmup                       :raf.readShort(), // uint16
        TransmitterAvail                     :raf.readShort(), // uint16
        WGSwitchPos                          :raf.readShort(), // uint16
        WGPFNTransferInterlock               :raf.readShort(), // uint16
        MaintenanceMode                      :raf.readShort(), // uint16
        MaintenanceRequired                  :raf.readShort(), // uint16
        PFNSwitchPosition                    :raf.readShort(), // uint16
        ModulatorOverload                    :raf.readShort(), // uint16
        ModulatorInvCurrent                  :raf.readShort(), // uint16
        ModulatorSwitchFail                  :raf.readShort(), // uint16
        MainPowerVoltage                     :raf.readShort(), // uint16
        ChargingSystemFail                   :raf.readShort(), // uint16
        InverseDiodeCurrent                  :raf.readShort(), // uint16
        TriggerAmp                           :raf.readShort(), // uint16
        CirculatorTemp                       :raf.readShort(), // uint16
        SpectrumFilterPressure               :raf.readShort(), // uint16
        WGARCVSWR                            :raf.readShort(), // uint16
        CabinetInterlock                     :raf.readShort(), // uint16
        CabinetAirTemp                       :raf.readShort(), // uint16
        CabinetAirflow                       :raf.readShort(), // uint16
        KlystronCurrent                      :raf.readShort(), // uint16
        KlystronFilamentCurrent              :raf.readShort(), // uint16
        KlystronVacionCurrent                :raf.readShort(), // uint16
        KlystronAirTemp                      :raf.readShort(), // uint16
        KlystronAirflow                      :raf.readShort(), // uint16
        ModulatorSwitchMaintenance           :raf.readShort(), // uint16
        PostChargeRegulatorMaintenance       :raf.readShort(), // uint16
        WGPressureHumidity                   :raf.readShort(), // uint16
        TransmitterOvervoltage               :raf.readShort(), // uint16
        TransmitterOvercurrent               :raf.readShort(), // uint16
        FocusCoilCurrent                     :raf.readShort(), // uint16
        FocusCoilAirflow                     :raf.readShort(), // uint16
        OilTemperature                       :raf.readShort(), // uint16
        PRFLimit                             :raf.readShort(), // uint16
        TransmitterOilLevel                  :raf.readShort(), // uint16
        TransmitterBatteryCharging           :raf.readShort(), // uint16
        HighVoltageStatus                    :raf.readShort(), // uint16
        TransmitterRecyclingSummary          :raf.readShort(), // uint16
        TransmitterInoperable                :raf.readShort(), // uint16
        TransmitterAirFilter                 :raf.readShort(), // uint16
        ZeroTestBit0                         :raf.readShort(), // uint16
        ZeroTestBit1                         :raf.readShort(), // uint16
        ZeroTestBit2                         :raf.readShort(), // uint16
        ZeroTestBit3                         :raf.readShort(), // uint16
        ZeroTestBit4                         :raf.readShort(), // uint16
        ZeroTestBit5                         :raf.readShort(), // uint16
        ZeroTestBit6                         :raf.readShort(), // uint16
        ZeroTestBit7                         :raf.readShort(), // uint16
        OneTestBit0                          :raf.readShort(), // uint16
        OneTestBit1                          :raf.readShort(), // uint16
        OneTestBit2                          :raf.readShort(), // uint16
        OneTestBit3                          :raf.readShort(), // uint16
        OneTestBit4                          :raf.readShort(), // uint16
        OneTestBit5                          :raf.readShort(), // uint16
        OneTestBit6                          :raf.readShort(), // uint16
        OneTestBit7                          :raf.readShort(), // uint16
        XMTRSPIPInterface                    :raf.readShort(), // uint16
        TransmitterSummaryStatus             :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        TransmitterRFPowerSensor             :raf.readFloat(), // float32
        HorizontalXMTRPeakPower              :raf.readFloat(), // float32
        XMTRPeakPower                        :raf.readFloat(), // float32
        VerticalXMTRPeakPower                :raf.readFloat(), // float32
        XMTRRFAvgPower                       :raf.readFloat(), // float32
        _                                    :raf.readInt(), // uint32
        XMTRRecycleCount                     :raf.readInt(), // uint32
        ReceiverBiasMeasurement              :raf.readFloat(), // float32
        TransmitImbalance                    :raf.readFloat(), // float32
        XMTRPowerMeterZero                   :raf.readFloat(), // float32
        _                                    :raf.read(8), // [8]byte
        ACUnit1CompressorShutoff             :raf.readShort(), // uint16
        ACUnit2CompressorShutoff             :raf.readShort(), // uint16
        GeneratorMaintenanceRequired         :raf.readShort(), // uint16
        GeneratorBatteryVoltage              :raf.readShort(), // uint16
        GeneratorEngine                      :raf.readShort(), // uint16
        GeneratorVoltFreq                    :raf.readShort(), // uint16
        PowerSource                          :raf.readShort(), // uint16
        TransitionalPowerSource              :raf.readShort(), // uint16
        GeneratorAutoRunOffSwitch            :raf.readShort(), // uint16
        AircraftHazardLighting               :raf.readShort(), // uint16
        _                                    :raf.read(22), // [22]byte
        EquipmentShelterFireDetectionSystem  :raf.readShort(), // uint16
        EquipmentShelterFireSmoke            :raf.readShort(), // uint16
        GeneratorShelterFireSmoke            :raf.readShort(), // uint16
        UtilityVoltFreq                      :raf.readShort(), // uint16
        SiteSecurityAlarm                    :raf.readShort(), // uint16
        SecurityEquipment                    :raf.readShort(), // uint16
        SecuritySystem                       :raf.readShort(), // uint16
        ReceiverConnectedToAntenna           :raf.readShort(), // uint16
        RadomeHatch                          :raf.readShort(), // uint16
        ACUnit1FilterDirty                   :raf.readShort(), // uint16
        ACUnit2FilterDirty                   :raf.readShort(), // uint16
        EquipmentShelterTemp                 :raf.readFloat(), // float32
        OutsideAmbientTemp                   :raf.readFloat(), // float32
        TransmitterLeavingAirTemp            :raf.readFloat(), // float32
        ACUnit1DischargeAirTemp              :raf.readFloat(), // float32
        GeneratorShelterTemp                 :raf.readFloat(), // float32
        RadomeAirTemp                        :raf.readFloat(), // float32
        ACUnit2DischargeAirTemp              :raf.readFloat(), // float32
        SPIPp15VPS                           :raf.readFloat(), // float32
        SPIPn15VPS                           :raf.readFloat(), // float32
        SPIP28VStatus                        :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        SPIP5VPS                             :raf.readFloat(), // float32
        ConvertedGeneratorFuelLevel          :raf.readShort(), // uint16
        _                                    :raf.read(32), // [32]byte
        ElevationUpperDeadLimit              :raf.readShort(), // uint16
        Overvolatage150                      :raf.readShort(), // uint16
        Undervolatage150                     :raf.readShort(), // uint16
        ElevationServoAmpInhibit             :raf.readShort(), // uint16
        ElevationServoAmpOvertemp            :raf.readShort(), // uint16
        ElevationServoAmpShortCircuit        :raf.readShort(), // uint16
        ElevationMotorOvertemp               :raf.readShort(), // uint16
        ElevationStowPin                     :raf.readShort(), // uint16
        ElevationHousing5VPS                 :raf.readShort(), // uint16
        ElevationLowerDeadLimit              :raf.readShort(), // uint16
        ElevationUpperNormalLimit            :raf.readShort(), // uint16
        ElevationLowerNormalLimit            :raf.readShort(), // uint16
        ElevationEncoderLight                :raf.readShort(), // uint16
        ElevationGearboxOil                  :raf.readShort(), // uint16
        ElevationHandwheel                   :raf.readShort(), // uint16
        ElevationAmpPS                       :raf.readShort(), // uint16
        AzimuthServoAmpInhibit               :raf.readShort(), // uint16
        AzimuthServoAmpShortCircuit          :raf.readShort(), // uint16
        AzimuthServoAmpOvertemp              :raf.readShort(), // uint16
        AzimuthMotorOvertemp                 :raf.readShort(), // uint16
        AzimuthStowPin                       :raf.readShort(), // uint16
        AzimuthHousing5VPS                   :raf.readShort(), // uint16
        AzimuthEncoderLight                  :raf.readShort(), // uint16
        AzimuthGearboxOil                    :raf.readShort(), // uint16
        AzimuthBullGearboxOil                :raf.readShort(), // uint16
        AzimuthHandwheel                     :raf.readShort(), // uint16
        AzimuthServoAMPPS                    :raf.readShort(), // uint16
        Servo                                :raf.readShort(), // uint16
        PedestalInterlockSwitch              :raf.readShort(), // uint16
        _                                    :raf.read(24), // [24]byte
        COHOClock                            :raf.readShort(), // uint16
        RFGeneratorFreqSelectOsc             :raf.readShort(), // uint16
        RFGeneratorRFSTALO                   :raf.readShort(), // uint16
        RFGeneratorPhaseShiftedCOHO          :raf.readShort(), // uint16
        Receiver9VpPS                        :raf.readShort(), // uint16
        Receiver5vpPS                        :raf.readShort(), // uint16
        Receiver18VpPS                       :raf.readShort(), // uint16
        Receiver9VnPS                        :raf.readShort(), // uint16
        SingleChanRDAIU5VpPS                 :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        HorzShortPulseNoise                  :raf.readFloat(), // float32
        HorzLongPulseNoise                   :raf.readFloat(), // float32
        HorzNoiseTemp                        :raf.readFloat(), // float32
        VertShortPulseNoise                  :raf.readFloat(), // float32
        VertLongPulseNoise                   :raf.readFloat(), // float32
        VertNoiseTemp                        :raf.readFloat(), // float32
        HorzLinearty                         :raf.readFloat(), // float32
        HorzDynamicRange                     :raf.readFloat(), // float32
        HorzDeltadBZ                         :raf.readFloat(), // float32
        VertDeltadBZ                         :raf.readFloat(), // float32
        KDPeakMeasured                       :raf.readFloat(), // float32
        _                                    :raf.readInt(), // uint32
        ShortPulseHorzdbz                    :raf.readFloat(), // float32
        LongPulseHorzdbz                     :raf.readFloat(), // float32
        VelocityProcessed                    :raf.readShort(), // uint16
        WidthProcessed                       :raf.readShort(), // uint16
        VelocityRFGen                        :raf.readShort(), // uint16
        WidthRFGen                           :raf.readShort(), // uint16
        HorzIO                               :raf.readFloat(), // float32
        VertIO                               :raf.readFloat(), // float32
        VertDynamicRange                     :raf.readFloat(), // float32
        ShortPulseVertdbz                    :raf.readFloat(), // float32
        LongPulseVertdbz                     :raf.readFloat(), // float32
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        HorzPowerSense                       :raf.readFloat(), // float32
        VertPowerSense                       :raf.readFloat(), // float32
        ZDRBias                              :raf.readFloat(), // float32
        _                                    :raf.read(12), // [12]byte
        ClutterSuppressionDelta              :raf.readFloat(), // float32
        ClutterSuppressionUnfilteredPower    :raf.readFloat(), // float32
        ClutterSuppressionFilteredPower      :raf.readFloat(), // float32
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        _                                    :raf.readInt(), // uint32
        VertLinearity                        :raf.readFloat(), // float32
        _                                    :raf.read(8), // [8]byte
        StateFileReadStatus                  :raf.readShort(), // uint16
        StateFileWriteStatus                 :raf.readShort(), // uint16
        BypassMapFileReadStatus              :raf.readShort(), // uint16
        BypassMapFileWriteStatus             :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        CurrentAdaptationFileReadStatus      :raf.readShort(), // uint16
        CurrentAdaptationFileWriteStatus     :raf.readShort(), // uint16
        CensorZoneFileReadStatus             :raf.readShort(), // uint16
        CensorZoneFileWriteStatus            :raf.readShort(), // uint16
        RemoteVCPFileReadStatus              :raf.readShort(), // uint16
        RemoteVCPFileWriteStatus             :raf.readShort(), // uint16
        BaselineAdaptationFileReadStatus     :raf.readShort(), // uint16
        ReadStatusPRFSets                    :raf.readShort(), // uint16
        ClutterFilterMapFileReadStatus       :raf.readShort(), // uint16
        ClutterFilterMapFileWriteStatus      :raf.readShort(), // uint16
        GeneralDiskIOError                   :raf.readShort(), // uint16
        RSPStatus                            :raf.readByte(), // uint8
        MotherboardTemp                      :raf.readByte(), // uint8
        CPU1Temp                             :raf.readByte(), // uint8
        CPU2Temp                             :raf.readByte(), // uint8
        CPU1FanSpeed                         :raf.readShort(), // uint16
        CPU2FanSpeed                         :raf.readShort(), // uint16
        RSPFan1Speed                         :raf.readShort(), // uint16
        RSPFan2Speed                         :raf.readShort(), // uint16
        RSPFan3Speed                         :raf.readShort(), // uint16
        _                                    :raf.read(12), // [12]byte
        SPIPCommStatus                       :raf.readShort(), // uint16
        HCIComStatus                         :raf.readShort(), // uint16
        _                                    :raf.readShort(), // uint16
        SignalProcessorCommandStatus         :raf.readShort(), // uint16
        AMECommStatus                        :raf.readShort(), // uint16
        RMSLinkStatus                        :raf.readShort(), // uint16
        RPGLinkStatus                        :raf.readShort(), // uint16
        InterpanelLinkStatus                 :raf.readShort(), // uint16
        PerformanceCheckTime                 :raf.readInt(), // uint32
        _                                    :raf.read(18), // [18]byte
        Version                              :raf.readShort(), // uint16 /// Version number for the performance data message
    }

	return message;
};

/* convert to camelcase */
// function firstLetterToLowercase(string) {
//     return string.charAt(0).toLowerCase() + string.slice(1);
// }

// text = text.split('\n');
// for (var i in text) {
//     var secondLetter = text[i].charAt(1);
//     if (secondLetter != secondLetter.toUpperCase()) {
//         text[i] = firstLetterToLowercase(text[i]);
//     }
// }
// text = text.join('\n');
// console.log(text)